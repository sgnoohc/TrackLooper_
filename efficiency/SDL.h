// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/home/users/phchang/public_html/analysis/sdl/TrackLooper/results/write_sdl_ntuple/pion1_0p5_50_20201114_pion_debug/fulleff_pion1_0p5_50.root", "tree", "SDL", "tas", "sdl")

#ifndef SDL_H
#define SDL_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class SDL {
 private: 
 protected: 
  unsigned int index;
  vector<float> *ph2_x_;
  TBranch *ph2_x_branch;
  bool     ph2_x_isLoaded;
  vector<float> *ph2_y_;
  TBranch *ph2_y_branch;
  bool     ph2_y_isLoaded;
  vector<float> *ph2_z_;
  TBranch *ph2_z_branch;
  bool     ph2_z_isLoaded;
  vector<unsigned int> *ph2_detId_;
  TBranch *ph2_detId_branch;
  bool     ph2_detId_isLoaded;
  vector<vector<int> > *ph2_simHitIdx_;
  TBranch *ph2_simHitIdx_branch;
  bool     ph2_simHitIdx_isLoaded;
  vector<unsigned int> *ph2_simType_;
  TBranch *ph2_simType_branch;
  bool     ph2_simType_isLoaded;
  vector<int> *ph2_anchorLayer_;
  TBranch *ph2_anchorLayer_branch;
  bool     ph2_anchorLayer_isLoaded;
  vector<float> *pix_x_;
  TBranch *pix_x_branch;
  bool     pix_x_isLoaded;
  vector<float> *pix_y_;
  TBranch *pix_y_branch;
  bool     pix_y_isLoaded;
  vector<float> *pix_z_;
  TBranch *pix_z_branch;
  bool     pix_z_isLoaded;
  vector<unsigned int> *pix_detId_;
  TBranch *pix_detId_branch;
  bool     pix_detId_isLoaded;
  vector<vector<int> > *pix_simHitIdx_;
  TBranch *pix_simHitIdx_branch;
  bool     pix_simHitIdx_isLoaded;
  vector<unsigned int> *pix_simType_;
  TBranch *pix_simType_branch;
  bool     pix_simType_isLoaded;
  vector<float> *simhit_x_;
  TBranch *simhit_x_branch;
  bool     simhit_x_isLoaded;
  vector<float> *simhit_y_;
  TBranch *simhit_y_branch;
  bool     simhit_y_isLoaded;
  vector<float> *simhit_z_;
  TBranch *simhit_z_branch;
  bool     simhit_z_isLoaded;
  vector<unsigned int> *simhit_detId_;
  TBranch *simhit_detId_branch;
  bool     simhit_detId_isLoaded;
  vector<unsigned int> *simhit_partnerDetId_;
  TBranch *simhit_partnerDetId_branch;
  bool     simhit_partnerDetId_isLoaded;
  vector<unsigned int> *simhit_subdet_;
  TBranch *simhit_subdet_branch;
  bool     simhit_subdet_isLoaded;
  vector<int> *simhit_particle_;
  TBranch *simhit_particle_branch;
  bool     simhit_particle_isLoaded;
  vector<vector<int> > *simhit_hitIdx_;
  TBranch *simhit_hitIdx_branch;
  bool     simhit_hitIdx_isLoaded;
  vector<int> *simhit_simTrkIdx_;
  TBranch *simhit_simTrkIdx_branch;
  bool     simhit_simTrkIdx_isLoaded;
  vector<float> *sim_pt_;
  TBranch *sim_pt_branch;
  bool     sim_pt_isLoaded;
  vector<float> *sim_eta_;
  TBranch *sim_eta_branch;
  bool     sim_eta_isLoaded;
  vector<float> *sim_phi_;
  TBranch *sim_phi_branch;
  bool     sim_phi_isLoaded;
  vector<float> *sim_pca_dxy_;
  TBranch *sim_pca_dxy_branch;
  bool     sim_pca_dxy_isLoaded;
  vector<float> *sim_pca_dz_;
  TBranch *sim_pca_dz_branch;
  bool     sim_pca_dz_isLoaded;
  vector<int> *sim_q_;
  TBranch *sim_q_branch;
  bool     sim_q_isLoaded;
  vector<int> *sim_event_;
  TBranch *sim_event_branch;
  bool     sim_event_isLoaded;
  vector<int> *sim_pdgId_;
  TBranch *sim_pdgId_branch;
  bool     sim_pdgId_isLoaded;
  vector<int> *sim_bunchCrossing_;
  TBranch *sim_bunchCrossing_branch;
  bool     sim_bunchCrossing_isLoaded;
  vector<int> *sim_parentVtxIdx_;
  TBranch *sim_parentVtxIdx_branch;
  bool     sim_parentVtxIdx_isLoaded;
  vector<int> *sim_hasAll12HitsInBarrel_;
  TBranch *sim_hasAll12HitsInBarrel_branch;
  bool     sim_hasAll12HitsInBarrel_isLoaded;
  vector<vector<int> > *sim_simHitIdx_;
  TBranch *sim_simHitIdx_branch;
  bool     sim_simHitIdx_isLoaded;
  vector<vector<int> > *sim_simHitLayer_;
  TBranch *sim_simHitLayer_branch;
  bool     sim_simHitLayer_isLoaded;
  vector<vector<int> > *sim_simHitBoth_;
  TBranch *sim_simHitBoth_branch;
  bool     sim_simHitBoth_isLoaded;
  vector<vector<float> > *sim_simHitDrFracWithHelix_;
  TBranch *sim_simHitDrFracWithHelix_branch;
  bool     sim_simHitDrFracWithHelix_isLoaded;
  vector<vector<float> > *sim_simHitDistXyWithHelix_;
  TBranch *sim_simHitDistXyWithHelix_branch;
  bool     sim_simHitDistXyWithHelix_isLoaded;
  vector<float> *simvtx_x_;
  TBranch *simvtx_x_branch;
  bool     simvtx_x_isLoaded;
  vector<float> *simvtx_y_;
  TBranch *simvtx_y_branch;
  bool     simvtx_y_isLoaded;
  vector<float> *simvtx_z_;
  TBranch *simvtx_z_branch;
  bool     simvtx_z_isLoaded;
  vector<float> *see_stateTrajGlbPx_;
  TBranch *see_stateTrajGlbPx_branch;
  bool     see_stateTrajGlbPx_isLoaded;
  vector<float> *see_stateTrajGlbPy_;
  TBranch *see_stateTrajGlbPy_branch;
  bool     see_stateTrajGlbPy_isLoaded;
  vector<float> *see_stateTrajGlbPz_;
  TBranch *see_stateTrajGlbPz_branch;
  bool     see_stateTrajGlbPz_isLoaded;
  vector<float> *see_stateTrajGlbX_;
  TBranch *see_stateTrajGlbX_branch;
  bool     see_stateTrajGlbX_isLoaded;
  vector<float> *see_stateTrajGlbY_;
  TBranch *see_stateTrajGlbY_branch;
  bool     see_stateTrajGlbY_isLoaded;
  vector<float> *see_stateTrajGlbZ_;
  TBranch *see_stateTrajGlbZ_branch;
  bool     see_stateTrajGlbZ_isLoaded;
  vector<float> *see_px_;
  TBranch *see_px_branch;
  bool     see_px_isLoaded;
  vector<float> *see_py_;
  TBranch *see_py_branch;
  bool     see_py_isLoaded;
  vector<float> *see_pz_;
  TBranch *see_pz_branch;
  bool     see_pz_isLoaded;
  vector<float> *see_ptErr_;
  TBranch *see_ptErr_branch;
  bool     see_ptErr_isLoaded;
  vector<float> *see_dxy_;
  TBranch *see_dxy_branch;
  bool     see_dxy_isLoaded;
  vector<float> *see_dxyErr_;
  TBranch *see_dxyErr_branch;
  bool     see_dxyErr_isLoaded;
  vector<float> *see_dz_;
  TBranch *see_dz_branch;
  bool     see_dz_isLoaded;
  vector<vector<int> > *see_hitIdx_;
  TBranch *see_hitIdx_branch;
  bool     see_hitIdx_isLoaded;
  vector<vector<int> > *see_hitType_;
  TBranch *see_hitType_branch;
  bool     see_hitType_isLoaded;
  vector<vector<int> > *see_simTrkIdx_;
  TBranch *see_simTrkIdx_branch;
  bool     see_simTrkIdx_isLoaded;
  vector<unsigned int> *see_algo_;
  TBranch *see_algo_branch;
  bool     see_algo_isLoaded;
  vector<vector<int> > *md_hitIdx_;
  TBranch *md_hitIdx_branch;
  bool     md_hitIdx_isLoaded;
  vector<vector<int> > *md_simTrkIdx_;
  TBranch *md_simTrkIdx_branch;
  bool     md_simTrkIdx_isLoaded;
  vector<vector<int> > *md_layer_;
  TBranch *md_layer_branch;
  bool     md_layer_isLoaded;
  vector<float> *md_pt_;
  TBranch *md_pt_branch;
  bool     md_pt_isLoaded;
  vector<float> *md_eta_;
  TBranch *md_eta_branch;
  bool     md_eta_isLoaded;
  vector<float> *md_phi_;
  TBranch *md_phi_branch;
  bool     md_phi_isLoaded;
  vector<float> *md_sim_pt_;
  TBranch *md_sim_pt_branch;
  bool     md_sim_pt_isLoaded;
  vector<float> *md_sim_eta_;
  TBranch *md_sim_eta_branch;
  bool     md_sim_eta_isLoaded;
  vector<float> *md_sim_phi_;
  TBranch *md_sim_phi_branch;
  bool     md_sim_phi_isLoaded;
  vector<float> *md_type_;
  TBranch *md_type_branch;
  bool     md_type_isLoaded;
  vector<float> *md_dz_;
  TBranch *md_dz_branch;
  bool     md_dz_isLoaded;
  vector<float> *md_dzCut_;
  TBranch *md_dzCut_branch;
  bool     md_dzCut_isLoaded;
  vector<float> *md_drt_;
  TBranch *md_drt_branch;
  bool     md_drt_isLoaded;
  vector<float> *md_drtCut_;
  TBranch *md_drtCut_branch;
  bool     md_drtCut_isLoaded;
  vector<float> *md_miniCut_;
  TBranch *md_miniCut_branch;
  bool     md_miniCut_isLoaded;
  vector<float> *md_dphi_;
  TBranch *md_dphi_branch;
  bool     md_dphi_isLoaded;
  vector<float> *md_dphiChange_;
  TBranch *md_dphiChange_branch;
  bool     md_dphiChange_isLoaded;
  vector<vector<int> > *sim_mdIdx_;
  TBranch *sim_mdIdx_branch;
  bool     sim_mdIdx_isLoaded;
  vector<vector<int> > *sim_mdIdx_isMTVmatch_;
  TBranch *sim_mdIdx_isMTVmatch_branch;
  bool     sim_mdIdx_isMTVmatch_isLoaded;
  vector<vector<int> > *ph2_mdIdx_;
  TBranch *ph2_mdIdx_branch;
  bool     ph2_mdIdx_isLoaded;
  vector<vector<int> > *sg_hitIdx_;
  TBranch *sg_hitIdx_branch;
  bool     sg_hitIdx_isLoaded;
  vector<vector<int> > *sg_simTrkIdx_;
  TBranch *sg_simTrkIdx_branch;
  bool     sg_simTrkIdx_isLoaded;
  vector<vector<int> > *sg_layer_;
  TBranch *sg_layer_branch;
  bool     sg_layer_isLoaded;
  vector<float> *sg_pt_;
  TBranch *sg_pt_branch;
  bool     sg_pt_isLoaded;
  vector<float> *sg_eta_;
  TBranch *sg_eta_branch;
  bool     sg_eta_isLoaded;
  vector<float> *sg_phi_;
  TBranch *sg_phi_branch;
  bool     sg_phi_isLoaded;
  vector<float> *sg_sim_pt_;
  TBranch *sg_sim_pt_branch;
  bool     sg_sim_pt_isLoaded;
  vector<float> *sg_sim_eta_;
  TBranch *sg_sim_eta_branch;
  bool     sg_sim_eta_isLoaded;
  vector<float> *sg_sim_phi_;
  TBranch *sg_sim_phi_branch;
  bool     sg_sim_phi_isLoaded;
  vector<vector<int> > *sim_sgIdx_;
  TBranch *sim_sgIdx_branch;
  bool     sim_sgIdx_isLoaded;
  vector<vector<int> > *sim_sgIdx_isMTVmatch_;
  TBranch *sim_sgIdx_isMTVmatch_branch;
  bool     sim_sgIdx_isMTVmatch_isLoaded;
  vector<vector<int> > *psg_hitIdx_;
  TBranch *psg_hitIdx_branch;
  bool     psg_hitIdx_isLoaded;
  vector<vector<int> > *psg_simTrkIdx_;
  TBranch *psg_simTrkIdx_branch;
  bool     psg_simTrkIdx_isLoaded;
  vector<vector<int> > *psg_layer_;
  TBranch *psg_layer_branch;
  bool     psg_layer_isLoaded;
  vector<float> *psg_pt_;
  TBranch *psg_pt_branch;
  bool     psg_pt_isLoaded;
  vector<float> *psg_eta_;
  TBranch *psg_eta_branch;
  bool     psg_eta_isLoaded;
  vector<float> *psg_phi_;
  TBranch *psg_phi_branch;
  bool     psg_phi_isLoaded;
  vector<float> *psg_sim_pt_;
  TBranch *psg_sim_pt_branch;
  bool     psg_sim_pt_isLoaded;
  vector<float> *psg_sim_eta_;
  TBranch *psg_sim_eta_branch;
  bool     psg_sim_eta_isLoaded;
  vector<float> *psg_sim_phi_;
  TBranch *psg_sim_phi_branch;
  bool     psg_sim_phi_isLoaded;
  vector<vector<int> > *sim_psgIdx_;
  TBranch *sim_psgIdx_branch;
  bool     sim_psgIdx_isLoaded;
  vector<vector<int> > *sim_psgIdx_isMTVmatch_;
  TBranch *sim_psgIdx_isMTVmatch_branch;
  bool     sim_psgIdx_isMTVmatch_isLoaded;
  vector<vector<int> > *tp_hitIdx_;
  TBranch *tp_hitIdx_branch;
  bool     tp_hitIdx_isLoaded;
  vector<vector<int> > *tp_simTrkIdx_;
  TBranch *tp_simTrkIdx_branch;
  bool     tp_simTrkIdx_isLoaded;
  vector<vector<int> > *tp_layer_;
  TBranch *tp_layer_branch;
  bool     tp_layer_isLoaded;
  vector<float> *tp_pt_;
  TBranch *tp_pt_branch;
  bool     tp_pt_isLoaded;
  vector<float> *tp_eta_;
  TBranch *tp_eta_branch;
  bool     tp_eta_isLoaded;
  vector<float> *tp_phi_;
  TBranch *tp_phi_branch;
  bool     tp_phi_isLoaded;
  vector<float> *tp_sim_pt_;
  TBranch *tp_sim_pt_branch;
  bool     tp_sim_pt_isLoaded;
  vector<float> *tp_sim_eta_;
  TBranch *tp_sim_eta_branch;
  bool     tp_sim_eta_isLoaded;
  vector<float> *tp_sim_phi_;
  TBranch *tp_sim_phi_branch;
  bool     tp_sim_phi_isLoaded;
  vector<vector<int> > *sim_tpIdx_;
  TBranch *sim_tpIdx_branch;
  bool     sim_tpIdx_isLoaded;
  vector<vector<int> > *sim_tpIdx_isMTVmatch_;
  TBranch *sim_tpIdx_isMTVmatch_branch;
  bool     sim_tpIdx_isMTVmatch_isLoaded;
  vector<vector<int> > *qp_hitIdx_;
  TBranch *qp_hitIdx_branch;
  bool     qp_hitIdx_isLoaded;
  vector<vector<int> > *qp_simTrkIdx_;
  TBranch *qp_simTrkIdx_branch;
  bool     qp_simTrkIdx_isLoaded;
  vector<vector<int> > *qp_layer_;
  TBranch *qp_layer_branch;
  bool     qp_layer_isLoaded;
  vector<float> *qp_pt_;
  TBranch *qp_pt_branch;
  bool     qp_pt_isLoaded;
  vector<float> *qp_eta_;
  TBranch *qp_eta_branch;
  bool     qp_eta_isLoaded;
  vector<float> *qp_phi_;
  TBranch *qp_phi_branch;
  bool     qp_phi_isLoaded;
  vector<float> *qp_sim_pt_;
  TBranch *qp_sim_pt_branch;
  bool     qp_sim_pt_isLoaded;
  vector<float> *qp_sim_eta_;
  TBranch *qp_sim_eta_branch;
  bool     qp_sim_eta_isLoaded;
  vector<float> *qp_sim_phi_;
  TBranch *qp_sim_phi_branch;
  bool     qp_sim_phi_isLoaded;
  vector<vector<int> > *sim_qpIdx_;
  TBranch *sim_qpIdx_branch;
  bool     sim_qpIdx_isLoaded;
  vector<vector<int> > *sim_qpIdx_isMTVmatch_;
  TBranch *sim_qpIdx_isMTVmatch_branch;
  bool     sim_qpIdx_isMTVmatch_isLoaded;
  vector<vector<int> > *pqp_hitIdx_;
  TBranch *pqp_hitIdx_branch;
  bool     pqp_hitIdx_isLoaded;
  vector<vector<int> > *pqp_simTrkIdx_;
  TBranch *pqp_simTrkIdx_branch;
  bool     pqp_simTrkIdx_isLoaded;
  vector<vector<int> > *pqp_layer_;
  TBranch *pqp_layer_branch;
  bool     pqp_layer_isLoaded;
  vector<float> *pqp_pt_;
  TBranch *pqp_pt_branch;
  bool     pqp_pt_isLoaded;
  vector<float> *pqp_eta_;
  TBranch *pqp_eta_branch;
  bool     pqp_eta_isLoaded;
  vector<float> *pqp_phi_;
  TBranch *pqp_phi_branch;
  bool     pqp_phi_isLoaded;
  vector<float> *pqp_sim_pt_;
  TBranch *pqp_sim_pt_branch;
  bool     pqp_sim_pt_isLoaded;
  vector<float> *pqp_sim_eta_;
  TBranch *pqp_sim_eta_branch;
  bool     pqp_sim_eta_isLoaded;
  vector<float> *pqp_sim_phi_;
  TBranch *pqp_sim_phi_branch;
  bool     pqp_sim_phi_isLoaded;
  vector<vector<int> > *sim_pqpIdx_;
  TBranch *sim_pqpIdx_branch;
  bool     sim_pqpIdx_isLoaded;
  vector<vector<int> > *sim_pqpIdx_isMTVmatch_;
  TBranch *sim_pqpIdx_isMTVmatch_branch;
  bool     sim_pqpIdx_isMTVmatch_isLoaded;
  vector<vector<int> > *tc_hitIdx_;
  TBranch *tc_hitIdx_branch;
  bool     tc_hitIdx_isLoaded;
  vector<vector<int> > *tc_simTrkIdx_;
  TBranch *tc_simTrkIdx_branch;
  bool     tc_simTrkIdx_isLoaded;
  vector<vector<int> > *tc_layer_;
  TBranch *tc_layer_branch;
  bool     tc_layer_isLoaded;
  vector<float> *tc_pt_;
  TBranch *tc_pt_branch;
  bool     tc_pt_isLoaded;
  vector<float> *tc_eta_;
  TBranch *tc_eta_branch;
  bool     tc_eta_isLoaded;
  vector<float> *tc_phi_;
  TBranch *tc_phi_branch;
  bool     tc_phi_isLoaded;
  vector<float> *tc_sim_pt_;
  TBranch *tc_sim_pt_branch;
  bool     tc_sim_pt_isLoaded;
  vector<float> *tc_sim_eta_;
  TBranch *tc_sim_eta_branch;
  bool     tc_sim_eta_isLoaded;
  vector<float> *tc_sim_phi_;
  TBranch *tc_sim_phi_branch;
  bool     tc_sim_phi_isLoaded;
  vector<vector<int> > *sim_tcIdx_;
  TBranch *sim_tcIdx_branch;
  bool     sim_tcIdx_isLoaded;
  vector<vector<int> > *sim_tcIdx_isMTVmatch_;
  TBranch *sim_tcIdx_isMTVmatch_branch;
  bool     sim_tcIdx_isMTVmatch_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const vector<float> &ph2_x();
  const vector<float> &ph2_y();
  const vector<float> &ph2_z();
  const vector<unsigned int> &ph2_detId();
  const vector<vector<int> > &ph2_simHitIdx();
  const vector<unsigned int> &ph2_simType();
  const vector<int> &ph2_anchorLayer();
  const vector<float> &pix_x();
  const vector<float> &pix_y();
  const vector<float> &pix_z();
  const vector<unsigned int> &pix_detId();
  const vector<vector<int> > &pix_simHitIdx();
  const vector<unsigned int> &pix_simType();
  const vector<float> &simhit_x();
  const vector<float> &simhit_y();
  const vector<float> &simhit_z();
  const vector<unsigned int> &simhit_detId();
  const vector<unsigned int> &simhit_partnerDetId();
  const vector<unsigned int> &simhit_subdet();
  const vector<int> &simhit_particle();
  const vector<vector<int> > &simhit_hitIdx();
  const vector<int> &simhit_simTrkIdx();
  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<int> &sim_event();
  const vector<int> &sim_pdgId();
  const vector<int> &sim_bunchCrossing();
  const vector<int> &sim_parentVtxIdx();
  const vector<int> &sim_hasAll12HitsInBarrel();
  const vector<vector<int> > &sim_simHitIdx();
  const vector<vector<int> > &sim_simHitLayer();
  const vector<vector<int> > &sim_simHitBoth();
  const vector<vector<float> > &sim_simHitDrFracWithHelix();
  const vector<vector<float> > &sim_simHitDistXyWithHelix();
  const vector<float> &simvtx_x();
  const vector<float> &simvtx_y();
  const vector<float> &simvtx_z();
  const vector<float> &see_stateTrajGlbPx();
  const vector<float> &see_stateTrajGlbPy();
  const vector<float> &see_stateTrajGlbPz();
  const vector<float> &see_stateTrajGlbX();
  const vector<float> &see_stateTrajGlbY();
  const vector<float> &see_stateTrajGlbZ();
  const vector<float> &see_px();
  const vector<float> &see_py();
  const vector<float> &see_pz();
  const vector<float> &see_ptErr();
  const vector<float> &see_dxy();
  const vector<float> &see_dxyErr();
  const vector<float> &see_dz();
  const vector<vector<int> > &see_hitIdx();
  const vector<vector<int> > &see_hitType();
  const vector<vector<int> > &see_simTrkIdx();
  const vector<unsigned int> &see_algo();
  const vector<vector<int> > &md_hitIdx();
  const vector<vector<int> > &md_simTrkIdx();
  const vector<vector<int> > &md_layer();
  const vector<float> &md_pt();
  const vector<float> &md_eta();
  const vector<float> &md_phi();
  const vector<float> &md_sim_pt();
  const vector<float> &md_sim_eta();
  const vector<float> &md_sim_phi();
  const vector<float> &md_type();
  const vector<float> &md_dz();
  const vector<float> &md_dzCut();
  const vector<float> &md_drt();
  const vector<float> &md_drtCut();
  const vector<float> &md_miniCut();
  const vector<float> &md_dphi();
  const vector<float> &md_dphiChange();
  const vector<vector<int> > &sim_mdIdx();
  const vector<vector<int> > &sim_mdIdx_isMTVmatch();
  const vector<vector<int> > &ph2_mdIdx();
  const vector<vector<int> > &sg_hitIdx();
  const vector<vector<int> > &sg_simTrkIdx();
  const vector<vector<int> > &sg_layer();
  const vector<float> &sg_pt();
  const vector<float> &sg_eta();
  const vector<float> &sg_phi();
  const vector<float> &sg_sim_pt();
  const vector<float> &sg_sim_eta();
  const vector<float> &sg_sim_phi();
  const vector<vector<int> > &sim_sgIdx();
  const vector<vector<int> > &sim_sgIdx_isMTVmatch();
  const vector<vector<int> > &psg_hitIdx();
  const vector<vector<int> > &psg_simTrkIdx();
  const vector<vector<int> > &psg_layer();
  const vector<float> &psg_pt();
  const vector<float> &psg_eta();
  const vector<float> &psg_phi();
  const vector<float> &psg_sim_pt();
  const vector<float> &psg_sim_eta();
  const vector<float> &psg_sim_phi();
  const vector<vector<int> > &sim_psgIdx();
  const vector<vector<int> > &sim_psgIdx_isMTVmatch();
  const vector<vector<int> > &tp_hitIdx();
  const vector<vector<int> > &tp_simTrkIdx();
  const vector<vector<int> > &tp_layer();
  const vector<float> &tp_pt();
  const vector<float> &tp_eta();
  const vector<float> &tp_phi();
  const vector<float> &tp_sim_pt();
  const vector<float> &tp_sim_eta();
  const vector<float> &tp_sim_phi();
  const vector<vector<int> > &sim_tpIdx();
  const vector<vector<int> > &sim_tpIdx_isMTVmatch();
  const vector<vector<int> > &qp_hitIdx();
  const vector<vector<int> > &qp_simTrkIdx();
  const vector<vector<int> > &qp_layer();
  const vector<float> &qp_pt();
  const vector<float> &qp_eta();
  const vector<float> &qp_phi();
  const vector<float> &qp_sim_pt();
  const vector<float> &qp_sim_eta();
  const vector<float> &qp_sim_phi();
  const vector<vector<int> > &sim_qpIdx();
  const vector<vector<int> > &sim_qpIdx_isMTVmatch();
  const vector<vector<int> > &pqp_hitIdx();
  const vector<vector<int> > &pqp_simTrkIdx();
  const vector<vector<int> > &pqp_layer();
  const vector<float> &pqp_pt();
  const vector<float> &pqp_eta();
  const vector<float> &pqp_phi();
  const vector<float> &pqp_sim_pt();
  const vector<float> &pqp_sim_eta();
  const vector<float> &pqp_sim_phi();
  const vector<vector<int> > &sim_pqpIdx();
  const vector<vector<int> > &sim_pqpIdx_isMTVmatch();
  const vector<vector<int> > &tc_hitIdx();
  const vector<vector<int> > &tc_simTrkIdx();
  const vector<vector<int> > &tc_layer();
  const vector<float> &tc_pt();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<float> &tc_sim_pt();
  const vector<float> &tc_sim_eta();
  const vector<float> &tc_sim_phi();
  const vector<vector<int> > &sim_tcIdx();
  const vector<vector<int> > &sim_tcIdx_isMTVmatch();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern SDL sdl;
#endif

namespace tas {
  const vector<float> &ph2_x();
  const vector<float> &ph2_y();
  const vector<float> &ph2_z();
  const vector<unsigned int> &ph2_detId();
  const vector<vector<int> > &ph2_simHitIdx();
  const vector<unsigned int> &ph2_simType();
  const vector<int> &ph2_anchorLayer();
  const vector<float> &pix_x();
  const vector<float> &pix_y();
  const vector<float> &pix_z();
  const vector<unsigned int> &pix_detId();
  const vector<vector<int> > &pix_simHitIdx();
  const vector<unsigned int> &pix_simType();
  const vector<float> &simhit_x();
  const vector<float> &simhit_y();
  const vector<float> &simhit_z();
  const vector<unsigned int> &simhit_detId();
  const vector<unsigned int> &simhit_partnerDetId();
  const vector<unsigned int> &simhit_subdet();
  const vector<int> &simhit_particle();
  const vector<vector<int> > &simhit_hitIdx();
  const vector<int> &simhit_simTrkIdx();
  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<int> &sim_event();
  const vector<int> &sim_pdgId();
  const vector<int> &sim_bunchCrossing();
  const vector<int> &sim_parentVtxIdx();
  const vector<int> &sim_hasAll12HitsInBarrel();
  const vector<vector<int> > &sim_simHitIdx();
  const vector<vector<int> > &sim_simHitLayer();
  const vector<vector<int> > &sim_simHitBoth();
  const vector<vector<float> > &sim_simHitDrFracWithHelix();
  const vector<vector<float> > &sim_simHitDistXyWithHelix();
  const vector<float> &simvtx_x();
  const vector<float> &simvtx_y();
  const vector<float> &simvtx_z();
  const vector<float> &see_stateTrajGlbPx();
  const vector<float> &see_stateTrajGlbPy();
  const vector<float> &see_stateTrajGlbPz();
  const vector<float> &see_stateTrajGlbX();
  const vector<float> &see_stateTrajGlbY();
  const vector<float> &see_stateTrajGlbZ();
  const vector<float> &see_px();
  const vector<float> &see_py();
  const vector<float> &see_pz();
  const vector<float> &see_ptErr();
  const vector<float> &see_dxy();
  const vector<float> &see_dxyErr();
  const vector<float> &see_dz();
  const vector<vector<int> > &see_hitIdx();
  const vector<vector<int> > &see_hitType();
  const vector<vector<int> > &see_simTrkIdx();
  const vector<unsigned int> &see_algo();
  const vector<vector<int> > &md_hitIdx();
  const vector<vector<int> > &md_simTrkIdx();
  const vector<vector<int> > &md_layer();
  const vector<float> &md_pt();
  const vector<float> &md_eta();
  const vector<float> &md_phi();
  const vector<float> &md_sim_pt();
  const vector<float> &md_sim_eta();
  const vector<float> &md_sim_phi();
  const vector<float> &md_type();
  const vector<float> &md_dz();
  const vector<float> &md_dzCut();
  const vector<float> &md_drt();
  const vector<float> &md_drtCut();
  const vector<float> &md_miniCut();
  const vector<float> &md_dphi();
  const vector<float> &md_dphiChange();
  const vector<vector<int> > &sim_mdIdx();
  const vector<vector<int> > &sim_mdIdx_isMTVmatch();
  const vector<vector<int> > &ph2_mdIdx();
  const vector<vector<int> > &sg_hitIdx();
  const vector<vector<int> > &sg_simTrkIdx();
  const vector<vector<int> > &sg_layer();
  const vector<float> &sg_pt();
  const vector<float> &sg_eta();
  const vector<float> &sg_phi();
  const vector<float> &sg_sim_pt();
  const vector<float> &sg_sim_eta();
  const vector<float> &sg_sim_phi();
  const vector<vector<int> > &sim_sgIdx();
  const vector<vector<int> > &sim_sgIdx_isMTVmatch();
  const vector<vector<int> > &psg_hitIdx();
  const vector<vector<int> > &psg_simTrkIdx();
  const vector<vector<int> > &psg_layer();
  const vector<float> &psg_pt();
  const vector<float> &psg_eta();
  const vector<float> &psg_phi();
  const vector<float> &psg_sim_pt();
  const vector<float> &psg_sim_eta();
  const vector<float> &psg_sim_phi();
  const vector<vector<int> > &sim_psgIdx();
  const vector<vector<int> > &sim_psgIdx_isMTVmatch();
  const vector<vector<int> > &tp_hitIdx();
  const vector<vector<int> > &tp_simTrkIdx();
  const vector<vector<int> > &tp_layer();
  const vector<float> &tp_pt();
  const vector<float> &tp_eta();
  const vector<float> &tp_phi();
  const vector<float> &tp_sim_pt();
  const vector<float> &tp_sim_eta();
  const vector<float> &tp_sim_phi();
  const vector<vector<int> > &sim_tpIdx();
  const vector<vector<int> > &sim_tpIdx_isMTVmatch();
  const vector<vector<int> > &qp_hitIdx();
  const vector<vector<int> > &qp_simTrkIdx();
  const vector<vector<int> > &qp_layer();
  const vector<float> &qp_pt();
  const vector<float> &qp_eta();
  const vector<float> &qp_phi();
  const vector<float> &qp_sim_pt();
  const vector<float> &qp_sim_eta();
  const vector<float> &qp_sim_phi();
  const vector<vector<int> > &sim_qpIdx();
  const vector<vector<int> > &sim_qpIdx_isMTVmatch();
  const vector<vector<int> > &pqp_hitIdx();
  const vector<vector<int> > &pqp_simTrkIdx();
  const vector<vector<int> > &pqp_layer();
  const vector<float> &pqp_pt();
  const vector<float> &pqp_eta();
  const vector<float> &pqp_phi();
  const vector<float> &pqp_sim_pt();
  const vector<float> &pqp_sim_eta();
  const vector<float> &pqp_sim_phi();
  const vector<vector<int> > &sim_pqpIdx();
  const vector<vector<int> > &sim_pqpIdx_isMTVmatch();
  const vector<vector<int> > &tc_hitIdx();
  const vector<vector<int> > &tc_simTrkIdx();
  const vector<vector<int> > &tc_layer();
  const vector<float> &tc_pt();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<float> &tc_sim_pt();
  const vector<float> &tc_sim_eta();
  const vector<float> &tc_sim_phi();
  const vector<vector<int> > &sim_tcIdx();
  const vector<vector<int> > &sim_tcIdx_isMTVmatch();
}
#include "rooutil.h"
#endif
